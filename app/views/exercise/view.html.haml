.container
    .text-right.mb-1.mt-3
        = link_to 'Dashboard', "/dashboard", {class: "btn btn-secondary"}
        = link_to "Back", "/allset/#{@exercise.id}", {class: "btn btn-outline-primary"}

.text-center.mb-3
    %h1 Analysis
    %h5.text-muted
        = @exercise.name

.mb-3.container.text-center
    %form{action: exercise_view_path, method: "GET"}
        %input{type: "date", name: "from", id: "from", value: params[:from] ? DateTime.parse(params[:from]).strftime("%Y-%m-%d") : 1.month.ago.strftime("%Y-%m-%d")}
        %label{for: "to"} to
        %input{type: "date", name: "to", id: "to", value: params[:to] ? DateTime.parse(params[:to]).strftime("%Y-%m-%d") : Time.current.strftime("%Y-%m-%d")}
        %input{type: "hidden", name: "id", id: "id", value: @exercise.id}
        %br
        %button.btn.btn-primary.w-50{type: "submit"} Submit

.container
    .card
        - data = @exercise.graph_orm(params[:from], params[:to])
        - if data.values.length == 0
            %p.bg-white.border.rounded.p-3.text-muted Not enough data available.
        - else
            - increase = (data.values.last - data.values.first).round(1)
            - gradient = increase / data.values.count
            .card-body
                %h5.card-title
                    %strong.text-primary
                        %i.fas.fa-chart-line
                        Estimated 1RM
                    - if increase > 0
                        %small.text-success
                            %i.fas.fa-arrow-up
                            = "#{increase}#{@exercise.unit}"
                    - elsif increase < 0
                        %small.text-danger
                            %i.fas.fa-arrow-down
                            = "#{increase}#{@exercise.unit}"
                    - else
                        %small.text-secondary
                            %i.fas.fa-arrow-right
                            = "#{increase}#{@exercise.unit}"
                    %small.text-secondary
                        = "(#{data.first.first} to #{data.keys.last})"
                %p.card-text.p-0
                    = line_chart data, 
                        ytitle: "Weight (#{@exercise.unit})", 
                        xtitle: "Date",
                        min: data.min_by(&:last), 
                        empty: "No data available",
                        discrete: true,
                        library: { colors: ['rgb(100,100,100)'] }
                    
    .card
        - data = @exercise.graph_total_volume(params[:from], params[:to])
        - if data.values.length == 0
            %p.bg-white.border.rounded.p-3.text-muted Not enough data available.
        - else
            - increase = (data.values.last - data.values.first).round(1)
            - gradient = increase / data.values.count
            .card-body
                %h5.card-title
                    %strong.text-primary
                        %i.fas.fa-chart-line
                        Total Volume
                    - if increase > 0
                        %small.text-success
                            %i.fas.fa-arrow-up
                            = "#{increase}#{@exercise.unit[0..1]}"
                    - elsif increase < 0
                        %small.text-danger
                            %i.fas.fa-arrow-down
                            = "#{increase}"
                    - else
                        %small.text-secondary
                            %i.fas.fa-arrow-right
                            = "#{increase}"
                    %small.text-secondary
                        = "(#{data.first.first} to #{data.keys.last})"
            %p.card-text.p-0
                = line_chart data,
                    ytitle: "Total Volume (#{@exercise.unit})", 
                    min: data.min_by(&:last), 
                    xtitle: "Date", 
                    empty: "No data available", 
                    discrete: true,
                    library: { colors: ['rgb(100,100,100)'] }

            
