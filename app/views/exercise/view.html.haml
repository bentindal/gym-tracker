.container
    .d-flex
        = link_to "Back", exercises_path, class: "btn btn-outline-primary text-right ml-auto mr-1 mt-2"

    .text-center
        %h1 Analysis
        %h5.text-muted
            = @exercise.name
.justify-content-center.d-flex.text-center.py-1.mb-2
    %form.text-center.py-1{action: exercise_view_path, method: "GET"}
        .row
            .col
                %label{for: "from"} From
                %input.form-control{type: "date", name: "from", id: "from", value: DateTime.parse(params[:from]).strftime("%Y-%m-%d")}
            .col
                %label{for: "to"} To
                %input.form-control{type: "date", name: "to", id: "to", value: DateTime.parse(params[:to]).strftime("%Y-%m-%d")}

        %input.form-control{type: "hidden", name: "id", id: "id", value: @exercise.id}
    
        %button.btn.btn-primary.mt-2{type: "submit"} Set Date
        
.container
    .card.mb-3
        - data = @exercise.graph_orm(params[:from], params[:to])
        - if data.values.length == 0
            %p.bg-white.border.rounded.p-3.text-muted No data available.
        - else
            - increase = (data.values.last - data.values.first)
            - gradient = increase / data.values.count
            .card-body
                %h5.card-title
                    %strong.text-primary
                        %i.fas.fa-chart-line
                        Estimated 1RM
                    - if increase > 0
                        %small.text-success
                            %i.fas.fa-arrow-up
                            = "#{increase}#{@exercise.unit}"
                    - elsif increase < 0
                        %small.text-danger
                            %i.fas.fa-arrow-down
                            = "#{increase}#{@exercise.unit}"
                    - else
                        %small.text-secondary
                            %i.fas.fa-arrow-right
                            = "#{increase}#{@exercise.unit}"
                    %small.text-secondary
                        = "(#{data.first.first} to #{data.keys.last})"
                %p.card-text.p-0
                    = line_chart data, 
                        ytitle: "Weight (#{@exercise.unit})", 
                        xtitle: "Date",
                        min: data.min_by(&:last), 
                        empty: "No data available",
                        discrete: true,
                        library: { colors: ['rgb(100,100,100)'] }
                    
    .card
        - data = @exercise.graph_total_volume(params[:from], params[:to])
        - if data.values.length == 0
            %p.bg-white.border.rounded.p-3.text-muted No data available.
        - else
            - increase = (data.values.last - data.values.first)
            - gradient = increase / data.values.count
            .card-body
                %h5.card-title
                    %strong.text-primary
                        %i.fas.fa-chart-line
                        Total Volume
                    - if increase > 0
                        %small.text-success
                            %i.fas.fa-arrow-up
                            = "#{increase}#{@exercise.unit[0..1]}"
                    - elsif increase < 0
                        %small.text-danger
                            %i.fas.fa-arrow-down
                            = "#{increase}"
                    - else
                        %small.text-secondary
                            %i.fas.fa-arrow-right
                            = "#{increase}"
                    %small.text-secondary
                        = "(#{data.first.first} to #{data.keys.last})"
            %p.card-text.p-0
                = line_chart data,
                    ytitle: "Total Volume (#{@exercise.unit})", 
                    min: data.min_by(&:last), 
                    xtitle: "Date (#{data.first.first} to #{data.keys.last})", 
                    empty: "No data available", 
                    discrete: true,
                    library: { colors: ['rgb(100,100,100)'] }

            
